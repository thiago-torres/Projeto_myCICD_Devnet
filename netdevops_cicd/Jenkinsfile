pipeline {
    agent any

    environment {
        GIT_CREDENTIALS_ID = '4d90fc8c-6bc2-4f0b-91ea-0b26a8b83aaf'
    }

    stages {
        stage('Checkout') {
            steps {
                checkoutCodeFromGitHub()
            }
        }

        stage('Configure Router Netmiko') {
            when {
                changeset "netdevops_cicd/loopback_update_cicd/netmiko_loopback.txt"
            }
            steps {
                configureRouterWithNetmiko()
            }
        }

        stage('Configure Router Netconf') {
            when {
                changeset "netdevops_cicd/loopback_update_cicd/netconf_loopback.xml"
            }
            steps {
                configureRouterWithNetconf()
            }
        }

        stage('Configure Router Restconf') {
            when {
                changeset "netdevops_cicd/loopback_update_cicd/restconf_loopback.json"
            }
            steps {
                configureRouterWithRestconf()
            }
        }
    }

    post {
        success {
            notifyPipelineSuccess()
        }
        failure {
            notifyPipelineFailure()
        }
    }
}

def checkoutCodeFromGitHub() {
    checkout([$class: 'GitSCM',
              branches: [[name: '*/main']],
              doGenerateSubmoduleConfigurations: false,
              extensions: [],
              userRemoteConfigs: [[
                  url: 'https://github.com/thiago-torres/Projeto_myCICD_Devnet.git',
                  credentialsId: env.GIT_CREDENTIALS_ID
              ]]
    ])
}

def configureRouterWithNetmiko() {
    script {
        sh 'python3 netdevops_cicd/loopback_update_cicd/netmiko_config_loopback.py'
    }
}

def configureRouterWithNetconf() {
    script {
        sh 'python3 netdevops_cicd/loopback_update_cicd/netconf_config_loopback.py'
    }
}

def configureRouterWithRestconf() {
    script {
        sh 'python3 netdevops_cicd/loopback_update_cicd/restconf_config_loopback.py'
    }
}

def notifyPipelineSuccess() {
    echo 'Pipeline executed successfully!'
}

def notifyPipelineFailure() {
    echo 'Pipeline failed!'
}
